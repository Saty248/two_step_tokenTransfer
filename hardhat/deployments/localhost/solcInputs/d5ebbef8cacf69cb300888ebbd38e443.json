{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/ContractMapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ContractMapper is Ownable {\n    event Log(string func);\n    mapping (address => address) userToSmartAccount;\n  constructor(address deployedContract) Ownable(deployedContract) {\n      \n    }\n    fallback() external payable {\n        // send / transfer (forwards 2300 gas to this fallback function)\n        // call (forwards all of the gas)\n        emit Log(\"fallback\" );\n    }\n\n    // Receive is a variant of fallback that is triggered when msg.data is empty\n    receive() external payable {\n        emit Log(\"receive\");\n    }\n\n\n    function getSmartAccount(address user)external  view returns(address) {\n        \n        return userToSmartAccount[user];\n\n    }\n    function setSmartAccount(address user,address smartAccount)external onlyOwner{\n        emit Log(\"setSmartAccount\");\n        userToSmartAccount[user]=smartAccount;\n    }\n\n}\n\n"
    },
    "contracts/SmartAccountDeployer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./SmartWallet.sol\";\ninterface IContractMapper {\n    function getSmartAccount(address user)external view returns(address);\n    function setSmartAccount(address user,address smartAccount) external;\n}\n\ncontract SmartAccountDeployer is Ownable{\n    event Owner(address ownerAddress);\n    event Log(string func);\n    event NewAccount(address contractAddress,address owner);\n    constructor() Ownable(msg.sender) {\n      emit Owner(msg.sender);\n    }\n    function createAndAddSmartAccount(address user,address _contractMapper)external  onlyOwner returns(address){\n        emit Log(\"createAndAddSmartAccount\");\n        IContractMapper contractMapper=IContractMapper(_contractMapper);\n        address userAcc=contractMapper.getSmartAccount(user);\n        if(userAcc==address(0x0000000000000000000000000000000000000000)){\n            SmartWallet newAccount=new SmartWallet(user);\n            emit NewAccount(address(newAccount), user);\n            return address(newAccount);\n        }else{\n            return userAcc;\n        }\n\n    }\n    fallback() external payable {\n        // send / transfer (forwards 2300 gas to this fallback function)\n        // call (forwards all of the gas)\n        emit Log(\"fallback\" );\n    }\n\n    // Receive is a variant of fallback that is triggered when msg.data is empty\n    receive() external payable {\n        emit Log(\"receive\");\n    }\n}"
    },
    "contracts/SmartWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nerror notAnOWner(address);\ncontract SmartWallet is Ownable {\n    address[] internal erc20s;\n    address[] internal erc721s;\n    \n    event Log(string func);\n    event ContractAdded(address _contract);\n\nconstructor(address owner)Ownable(owner){}\n    \nfunction balance()external view onlyOwner returns(uint){\nreturn address(this).balance;\n}\n\nfunction iserc20TokenOwner(address contAddress) public view returns(bool){\n    bool isTokenOwner=false;\n    for (uint i = 0; i < erc20s.length; i++) {\n        if(contAddress==erc20s[i]){\n            isTokenOwner=true;\n            break;\n        }\n        \n    }\n    return isTokenOwner; \n}\n\nfunction iserc721TokenOwner(address contAddress) public view returns(bool){\n    bool isTokenOwner=false;\n    for (uint i = 0; i < erc721s.length; i++) {\n        if(contAddress==erc721s[i]){\n            isTokenOwner=true;\n            break;\n        }\n        \n    }\n    return isTokenOwner; \n}\n\nfunction adderc20Contract(address contractAddress)external{\n    emit Log(\"adderc20Contract\");\n    if(contractAddress==address(0x0000000000000000000000000000000000000000)) revert(\"zero address\");\n    \n    erc20s.push(contractAddress);\n    emit ContractAdded(contractAddress);\n}\nfunction adderc721Contract(address contractAddress)external{\n    emit Log(\"adderc721Contract\");\n    if(contractAddress==address(0x0000000000000000000000000000000000000000)) revert(\"zero address\");\n    \n    erc721s.push(contractAddress);\n    emit ContractAdded(contractAddress);\n}\n\n\nfunction erc20Caller(address contAddress,bytes memory funcNameWithARguments)external returns(bytes memory){\n    emit Log(\"erc20Caller\");\n     bool isTokenOwner=iserc20TokenOwner(contAddress);\n     if(!isTokenOwner) revert notAnOWner(contAddress);\n     (bool success, bytes memory data)=contAddress.call(funcNameWithARguments);\n     require(success,\"function call failed\");\n     return data;\n\n\n}\n\nfunction erc721Caller(address contAddress,bytes memory funcNameWithARguments)external returns(bytes memory){\n    emit Log(\"erc20Caller\");\n     bool isTokenOwner=iserc721TokenOwner(contAddress);\n     if(!isTokenOwner) revert notAnOWner(contAddress);\n     (bool success, bytes memory data)=contAddress.call(funcNameWithARguments);\n     require(success,\"function call failed\");\n     return data;\n\n\n}\n\nfallback() external payable {\n        // send / transfer (forwards 2300 gas to this fallback function)\n        // call (forwards all of the gas)\n        emit Log(\"fallback\" );\n    }\n\n    // Receive is a variant of fallback that is triggered when msg.data is empty\n    receive() external payable {\n        emit Log(\"receive\");\n    }\n\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}